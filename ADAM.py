import streamlit as st
import re
from unidecode import unidecode

# Vari√°vel global para armazenar o √≠ndice atual
if 'current_index' not in st.session_state:
    st.session_state.current_index = 0

def tokenize_text(text):
    words = text.split()
    if len(words) > 800:
        raise ValueError("O texto deve ter no m√°ximo 800 palavras.")

    tokens = re.findall(r'\b\w+[\w(),]*\b', text)
    tokens = [unidecode(token) for token in tokens]
    return tokens

# Configura√ß√£o da interface Streamlit
st.set_page_config(page_title="Tokenizador de Texto", page_icon="‚úÇÔ∏è", layout="wide")

st.title("üåü Tokenizador de Texto üåü")
st.write("Digite seu texto (at√© 800 palavras) e clique em 'Tokenizar' para ver as palavras separadas.")

# Cria√ß√£o de colunas para layout
col1, col2 = st.columns([2, 1])

with col1:
    input_text = st.text_area("Texto de entrada", height=300)

with col2:
    st.write("### Instru√ß√µes:")
    st.write("1. Insira seu texto na caixa acima.")
    st.write("2. Defina um √≠ndice inicial para a tokeniza√ß√£o.")
    st.write("3. Clique no bot√£o 'Tokenizar'.")
    st.write("4. Veja as palavras tokenizadas abaixo.")

# Campo para o usu√°rio definir o √≠ndice inicial
initial_index = st.number_input("√çndice inicial:", min_value=0, value=st.session_state.current_index)

# Exibir o √∫ltimo √≠ndice utilizado como input
last_index = st.number_input("√öltimo √≠ndice utilizado:", min_value=0, value=st.session_state.current_index)

if st.button("Tokenizar"):
    try:
        tokens = tokenize_text(input_text)
        if tokens:
            # Atualiza o √≠ndice atual baseado no √≠ndice inicial fornecido pelo usu√°rio
            token_dict = {str(last_index + i): f'"{token}"' for i, token in enumerate(tokens)}
            st.session_state.current_index = last_index + len(tokens)  # Atualiza o √≠ndice para a pr√≥xima tokeniza√ß√£o

            st.write("### Palavras tokenizadas:")
            st.write(token_dict)
    except ValueError as e:
        st.error(e)
    except Exception as e:
        st.error(f"Ocorreu um erro: {e}")